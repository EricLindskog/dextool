#ifndef class_interface_hpp
#define class_interface_hpp
class StubSimple : public Simple {
public:
    virtual void func1();
    virtual void operator=(const Simple& other);
private:
    virtual char* func3();
    virtual int func4();
public:
    StubSimple();
    virtual ~StubSimple();

public:
    StubInternalSimple::StubCallback& StubGetCallback();
    StubInternalSimple::StubCounter& StubGetCounter();
    StubInternalSimple::StubStatic& StubGetStatic();

private:
    StubInternalSimple::StubCallback StubSimple_callback;
    StubInternalSimple::StubCounter StubSimple_cnt;
    StubInternalSimple::StubStatic StubSimple_static;
};

namespace StubCallbackSimple {
struct Ifunc1 { virtual void func1() = 0; };
struct IopAssign { virtual void opAssign(const Simple& other) = 0; };
struct Ifunc3 { virtual char* func3() = 0; };
struct Ifunc4 { virtual int func4() = 0; };
struct IdtorSimple { virtual void dtorSimple() = 0; };
} //NS:StubCallbackSimple

namespace StubInternalSimple {
struct StubCallback {
    StubCallbackSimple::Ifunc1* func1;
    StubCallbackSimple::IopAssign* opAssign;
    StubCallbackSimple::Ifunc3* func3;
    StubCallbackSimple::Ifunc4* func4;
    StubCallbackSimple::IdtorSimple* dtorSimple;
};
void StubInit(StubCallback* value);

struct StubCounter {
    unsigned func1;
    unsigned opAssign;
    unsigned func3;
    unsigned func4;
    unsigned dtorSimple;
};
void StubInit(StubCounter* value);

struct StubStatic {
    Simple* opAssign_param_other;
    char* func3_return;
    int func4_return;
};
void StubInit(StubStatic* value);

} //NS:StubInternalSimple

#endif // class_interface_hpp
