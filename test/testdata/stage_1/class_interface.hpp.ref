#ifndef stub_class_interface_hpp
#define stub_class_interface_hpp
#include "class_interface.hpp"

class StubSimple;

namespace StubCallbackSimple {
struct Ifunc1 { virtual int func1() = 0; };
struct Ifunc2_int { virtual void func2_int(int x) = 0; };
struct Ifunc2_double { virtual void func2_double(double x) = 0; };
struct Ifunc2_doublePtr { virtual void func2_doublePtr(double * x) = 0; };
struct Ifunc3_long_long { virtual void func3_long_long(long x, long y) = 0; };
struct Ifunc3_longlong { virtual void func3_longlong(long long x) = 0; };
struct IopAssign_constSimpleRef { virtual void opAssign_constSimpleRef(const Simple & other) = 0; };
struct Ifunc3 { virtual void func3() = 0; };
struct IStubDtor { virtual void StubDtor() = 0; };
} //NS:StubCallbackSimple

namespace StubInternalSimple {
class Stubfunc1 {
public:
    StubCallbackSimple::Ifunc1* GetCallback();
    void SetCallback(StubCallbackSimple::Ifunc1* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
    int& SetReturn();
private:
    friend class ::StubSimple;

    StubCallbackSimple::Ifunc1* callback;
    unsigned call_counter;
    int stub_return;
};
void StubInit(Stubfunc1* value);

class Stubfunc2_int {
public:
    StubCallbackSimple::Ifunc2_int* GetCallback();
    void SetCallback(StubCallbackSimple::Ifunc2_int* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
    int GetParam_x();
private:
    friend class ::StubSimple;

    StubCallbackSimple::Ifunc2_int* callback;
    unsigned call_counter;
    int Param_x;
};
void StubInit(Stubfunc2_int* value);

class Stubfunc2_double {
public:
    StubCallbackSimple::Ifunc2_double* GetCallback();
    void SetCallback(StubCallbackSimple::Ifunc2_double* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
    double GetParam_x();
private:
    friend class ::StubSimple;

    StubCallbackSimple::Ifunc2_double* callback;
    unsigned call_counter;
    double Param_x;
};
void StubInit(Stubfunc2_double* value);

class Stubfunc2_doublePtr {
public:
    StubCallbackSimple::Ifunc2_doublePtr* GetCallback();
    void SetCallback(StubCallbackSimple::Ifunc2_doublePtr* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
    double* GetParam_x();
private:
    friend class ::StubSimple;

    StubCallbackSimple::Ifunc2_doublePtr* callback;
    unsigned call_counter;
    double* Param_x;
};
void StubInit(Stubfunc2_doublePtr* value);

class Stubfunc3_long_long {
public:
    StubCallbackSimple::Ifunc3_long_long* GetCallback();
    void SetCallback(StubCallbackSimple::Ifunc3_long_long* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
    long GetParam_x();
    long GetParam_y();
private:
    friend class ::StubSimple;

    StubCallbackSimple::Ifunc3_long_long* callback;
    unsigned call_counter;
    long Param_x;
    long Param_y;
};
void StubInit(Stubfunc3_long_long* value);

class Stubfunc3_longlong {
public:
    StubCallbackSimple::Ifunc3_longlong* GetCallback();
    void SetCallback(StubCallbackSimple::Ifunc3_longlong* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
    long long GetParam_x();
private:
    friend class ::StubSimple;

    StubCallbackSimple::Ifunc3_longlong* callback;
    unsigned call_counter;
    long long Param_x;
};
void StubInit(Stubfunc3_longlong* value);

class StubopAssign_constSimpleRef {
public:
    StubCallbackSimple::IopAssign_constSimpleRef* GetCallback();
    void SetCallback(StubCallbackSimple::IopAssign_constSimpleRef* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
    Simple* GetParam_other();
private:
    friend class ::StubSimple;

    StubCallbackSimple::IopAssign_constSimpleRef* callback;
    unsigned call_counter;
    Simple* Param_other;
};
void StubInit(StubopAssign_constSimpleRef* value);

class Stubfunc3 {
public:
    StubCallbackSimple::Ifunc3* GetCallback();
    void SetCallback(StubCallbackSimple::Ifunc3* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
private:
    friend class ::StubSimple;

    StubCallbackSimple::Ifunc3* callback;
    unsigned call_counter;
};
void StubInit(Stubfunc3* value);

class StubStubDtor {
public:
    StubCallbackSimple::IStubDtor* GetCallback();
    void SetCallback(StubCallbackSimple::IStubDtor* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
private:
    friend class ::StubSimple;

    StubCallbackSimple::IStubDtor* callback;
    unsigned call_counter;
};
void StubInit(StubStubDtor* value);

class StubStubData {
public:
    StubStubData();
    ~StubStubData();

    StubInternalSimple::Stubfunc1& func1();
    StubInternalSimple::Stubfunc2_int& func2_int();
    StubInternalSimple::Stubfunc2_double& func2_double();
    StubInternalSimple::Stubfunc2_doublePtr& func2_doublePtr();
    StubInternalSimple::Stubfunc3_long_long& func3_long_long();
    StubInternalSimple::Stubfunc3_longlong& func3_longlong();
    StubInternalSimple::StubopAssign_constSimpleRef& opAssign_constSimpleRef();
    StubInternalSimple::Stubfunc3& func3();
    StubInternalSimple::StubStubDtor& StubDtor();

private:
    StubInternalSimple::Stubfunc1 stub_func1;
    StubInternalSimple::Stubfunc2_int stub_func2_int;
    StubInternalSimple::Stubfunc2_double stub_func2_double;
    StubInternalSimple::Stubfunc2_doublePtr stub_func2_doublePtr;
    StubInternalSimple::Stubfunc3_long_long stub_func3_long_long;
    StubInternalSimple::Stubfunc3_longlong stub_func3_longlong;
    StubInternalSimple::StubopAssign_constSimpleRef stub_opAssign_constSimpleRef;
    StubInternalSimple::Stubfunc3 stub_func3;
    StubInternalSimple::StubStubDtor stub_StubDtor;
};

void StubStubManagerRegister(::StubSimple* instance);
void StubStubManagerUnRegister(::StubSimple* instance);
} //NS:StubInternalSimple

class StubStubSimpleManager {
public:
    StubStubSimpleManager();
    ~StubStubSimpleManager();

    /// Get the first instance created.
    /// @return Pointer to instance or null if none is created.
    ::StubSimple* GetInstance();

    /// Get the Nth instance created.
    /// @return Pointer to instance or null if none was found.
    ::StubSimple* GetInstance(unsigned nth);
};

class StubSimple : public Simple {
public:
    virtual int func1();
    virtual void func2(int x);
    virtual void func2(double x);
    virtual void func2(double * x);
    virtual void func3(long x, long y);
    virtual void func3(long long x);
    virtual void operator=(const Simple & other);
private:
    virtual void func3();
public:
    StubSimple();
    virtual ~StubSimple();

public:
    StubInternalSimple::StubStubData& GetStub();

private:
    mutable StubInternalSimple::StubStubData Stub_data;
};

#endif // stub_class_interface_hpp
