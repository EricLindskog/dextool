#ifndef stub_class_nested_hpp
#define stub_class_nested_hpp
#include "class_nested.hpp"

class StubOuterClass;

namespace StubCallbackOuterClass {
struct IStubDtor { virtual void StubDtor() = 0;
};
} //NS:StubCallbackOuterClass

namespace StubInternalOuterClass {
class StubStubDtor {
public:
    StubCallbackOuterClass::IStubDtor* GetCallback();
    void SetCallback(StubCallbackOuterClass::IStubDtor* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
private:
    friend class ::StubOuterClass;

    StubCallbackOuterClass::IStubDtor* callback;
    unsigned call_counter;
};
void StubInit(StubStubDtor* value);

class StubStubData {
public:
    StubStubData();
    ~StubStubData();

    StubInternalOuterClass::StubStubDtor& StubDtor();

private:
    StubInternalOuterClass::StubStubDtor stub_StubDtor;
};
} //NS:StubInternalOuterClass

class StubOuterClass : public OuterClass {
public:
    StubOuterClass();
    ~StubOuterClass();

public:
    StubInternalOuterClass::StubStubData& GetStub();

private:
    mutable StubInternalOuterClass::StubStubData Stub_data;
};

class StubInnerClass;

namespace StubCallbackInnerClass {
struct IStubDtor { virtual void StubDtor() = 0;
};
} //NS:StubCallbackInnerClass

namespace StubInternalInnerClass {
class StubStubDtor {
public:
    StubCallbackInnerClass::IStubDtor* GetCallback();
    void SetCallback(StubCallbackInnerClass::IStubDtor* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
private:
    friend class ::StubInnerClass;

    StubCallbackInnerClass::IStubDtor* callback;
    unsigned call_counter;
};
void StubInit(StubStubDtor* value);

class StubStubData {
public:
    StubStubData();
    ~StubStubData();

    StubInternalInnerClass::StubStubDtor& StubDtor();

private:
    StubInternalInnerClass::StubStubDtor stub_StubDtor;
};
} //NS:StubInternalInnerClass

class StubInnerClass : public OuterClass::InnerClass {
public:
    StubInnerClass();
    ~StubInnerClass();

public:
    StubInternalInnerClass::StubStubData& GetStub();

private:
    mutable StubInternalInnerClass::StubStubData Stub_data;
};

#endif // stub_class_nested_hpp
