#include "stub_class_no_virtual.hpp"

namespace StubInternalSimple {
StubCallbackSimple::Ifunc1* Stubfunc1::GetCallback() {
    return callback;
}

void Stubfunc1::SetCallback(StubCallbackSimple::Ifunc1* value) {
    callback = value;
}

unsigned Stubfunc1::GetCallCounter() const {
    return call_counter;
}

void Stubfunc1::ResetCallCounter() {
    call_counter = 0;
}

void StubInit(Stubfunc1* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc1);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSimple::Ifunc2* Stubfunc2::GetCallback() {
    return callback;
}

void Stubfunc2::SetCallback(StubCallbackSimple::Ifunc2* value) {
    callback = value;
}

unsigned Stubfunc2::GetCallCounter() const {
    return call_counter;
}

void Stubfunc2::ResetCallCounter() {
    call_counter = 0;
}

int& Stubfunc2::SetReturn() {
    return stub_return;
}

void StubInit(Stubfunc2* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc2);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSimple::Ifunc6_some_pointer* Stubfunc6_some_pointer::GetCallback() {
    return callback;
}

void Stubfunc6_some_pointer::SetCallback(StubCallbackSimple::Ifunc6_some_pointer* value) {
    callback = value;
}

unsigned Stubfunc6_some_pointer::GetCallCounter() const {
    return call_counter;
}

void Stubfunc6_some_pointer::ResetCallCounter() {
    call_counter = 0;
}

some_pointer Stubfunc6_some_pointer::GetParam_w() {
    return Param_w;
}

char *& Stubfunc6_some_pointer::SetReturn() {
    return stub_return;
}

void StubInit(Stubfunc6_some_pointer* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc6_some_pointer);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSimple::Ifunc7_int_char* Stubfunc7_int_char::GetCallback() {
    return callback;
}

void Stubfunc7_int_char::SetCallback(StubCallbackSimple::Ifunc7_int_char* value) {
    callback = value;
}

unsigned Stubfunc7_int_char::GetCallCounter() const {
    return call_counter;
}

void Stubfunc7_int_char::ResetCallCounter() {
    call_counter = 0;
}

int* Stubfunc7_int_char::GetParam_y() {
    return Param_y;
}

char* Stubfunc7_int_char::GetParam_yy() {
    return Param_yy;
}

float& Stubfunc7_int_char::SetReturn() {
    return stub_return;
}

void StubInit(Stubfunc7_int_char* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc7_int_char);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSimple::Ifunc3_int_const_int* Stubfunc3_int_const_int::GetCallback() {
    return callback;
}

void Stubfunc3_int_const_int::SetCallback(StubCallbackSimple::Ifunc3_int_const_int* value) {
    callback = value;
}

unsigned Stubfunc3_int_const_int::GetCallCounter() const {
    return call_counter;
}

void Stubfunc3_int_const_int::ResetCallCounter() {
    call_counter = 0;
}

int Stubfunc3_int_const_int::GetParam_x() {
    return Param_x;
}

int Stubfunc3_int_const_int::GetParam_xx() {
    return Param_xx;
}

double& Stubfunc3_int_const_int::SetReturn() {
    return stub_return;
}

void StubInit(Stubfunc3_int_const_int* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc3_int_const_int);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSimple::Ifunc4_MadeUp_const_MadeUp_const_MadeUp_const_MadeUp* Stubfunc4_MadeUp_const_MadeUp_const_MadeUp_const_MadeUp::GetCallback() {
    return callback;
}

void Stubfunc4_MadeUp_const_MadeUp_const_MadeUp_const_MadeUp::SetCallback(StubCallbackSimple::Ifunc4_MadeUp_const_MadeUp_const_MadeUp_const_MadeUp* value) {
    callback = value;
}

unsigned Stubfunc4_MadeUp_const_MadeUp_const_MadeUp_const_MadeUp::GetCallCounter() const {
    return call_counter;
}

void Stubfunc4_MadeUp_const_MadeUp_const_MadeUp_const_MadeUp::ResetCallCounter() {
    call_counter = 0;
}

MadeUp Stubfunc4_MadeUp_const_MadeUp_const_MadeUp_const_MadeUp::GetParam_z() {
    return Param_z;
}

MadeUp Stubfunc4_MadeUp_const_MadeUp_const_MadeUp_const_MadeUp::GetParam_zz() {
    return Param_zz;
}

MadeUp* Stubfunc4_MadeUp_const_MadeUp_const_MadeUp_const_MadeUp::GetParam_zzz() {
    return Param_zzz;
}

MadeUp** Stubfunc4_MadeUp_const_MadeUp_const_MadeUp_const_MadeUp::GetParam_zzzz() {
    return Param_zzzz;
}

void *& Stubfunc4_MadeUp_const_MadeUp_const_MadeUp_const_MadeUp::SetReturn() {
    return stub_return;
}

void StubInit(Stubfunc4_MadeUp_const_MadeUp_const_MadeUp_const_MadeUp* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc4_MadeUp_const_MadeUp_const_MadeUp_const_MadeUp);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSimple::IopAssign_const_Simple* StubopAssign_const_Simple::GetCallback() {
    return callback;
}

void StubopAssign_const_Simple::SetCallback(StubCallbackSimple::IopAssign_const_Simple* value) {
    callback = value;
}

unsigned StubopAssign_const_Simple::GetCallCounter() const {
    return call_counter;
}

void StubopAssign_const_Simple::ResetCallCounter() {
    call_counter = 0;
}

Simple* StubopAssign_const_Simple::GetParam_other() {
    return Param_other;
}

void StubInit(StubopAssign_const_Simple* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(StubopAssign_const_Simple);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSimple::IStubDtor* StubStubDtor::GetCallback() {
    return callback;
}

void StubStubDtor::SetCallback(StubCallbackSimple::IStubDtor* value) {
    callback = value;
}

unsigned StubStubDtor::GetCallCounter() const {
    return call_counter;
}

void StubStubDtor::ResetCallCounter() {
    call_counter = 0;
}

void StubInit(StubStubDtor* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(StubStubDtor);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubStubData::StubStubData() {
    StubInit(&stub_func1);
    StubInit(&stub_func2);
    StubInit(&stub_func6_some_pointer);
    StubInit(&stub_func7_int_char);
    StubInit(&stub_func3_int_const_int);
    StubInit(&stub_func4_MadeUp_const_MadeUp_const_MadeUp_const_MadeUp);
    StubInit(&stub_opAssign_const_Simple);
    StubInit(&stub_StubDtor);
}

StubStubData::~StubStubData() {
}

StubInternalSimple::Stubfunc1& StubStubData::func1() {
    return stub_func1;
}

StubInternalSimple::Stubfunc2& StubStubData::func2() {
    return stub_func2;
}

StubInternalSimple::Stubfunc6_some_pointer& StubStubData::func6_some_pointer() {
    return stub_func6_some_pointer;
}

StubInternalSimple::Stubfunc7_int_char& StubStubData::func7_int_char() {
    return stub_func7_int_char;
}

StubInternalSimple::Stubfunc3_int_const_int& StubStubData::func3_int_const_int() {
    return stub_func3_int_const_int;
}

StubInternalSimple::Stubfunc4_MadeUp_const_MadeUp_const_MadeUp_const_MadeUp& StubStubData::func4_MadeUp_const_MadeUp_const_MadeUp_const_MadeUp() {
    return stub_func4_MadeUp_const_MadeUp_const_MadeUp_const_MadeUp;
}

StubInternalSimple::StubopAssign_const_Simple& StubStubData::opAssign_const_Simple() {
    return stub_opAssign_const_Simple;
}

StubInternalSimple::StubStubDtor& StubStubData::StubDtor() {
    return stub_StubDtor;
}

} //NS:StubInternalSimple

void StubSimple::func1() {
    Stub_data.func1().call_counter++;

    if (Stub_data.func1().callback != 0) {
        Stub_data.func1().callback->func1();
    }
}

int StubSimple::func2() {
    Stub_data.func2().call_counter++;

    if (Stub_data.func2().callback != 0) {
        return Stub_data.func2().callback->func2();
    }
    else {
        return Stub_data.func2().stub_return;
    }
}

char * StubSimple::func6(some_pointer w) {
    Stub_data.func6_some_pointer().call_counter++;
    Stub_data.func6_some_pointer().Param_w = w;

    if (Stub_data.func6_some_pointer().callback != 0) {
        return Stub_data.func6_some_pointer().callback->func6_some_pointer(w);
    }
    else {
        return Stub_data.func6_some_pointer().stub_return;
    }
}

float StubSimple::func7(int & y, char * yy) {
    Stub_data.func7_int_char().call_counter++;
    Stub_data.func7_int_char().Param_y = &y;
    Stub_data.func7_int_char().Param_yy = yy;

    if (Stub_data.func7_int_char().callback != 0) {
        return Stub_data.func7_int_char().callback->func7_int_char(y, yy);
    }
    else {
        return Stub_data.func7_int_char().stub_return;
    }
}

const double StubSimple::func3(int x, const int xx) {
    Stub_data.func3_int_const_int().call_counter++;
    Stub_data.func3_int_const_int().Param_x = x;
    Stub_data.func3_int_const_int().Param_xx = xx;

    if (Stub_data.func3_int_const_int().callback != 0) {
        return Stub_data.func3_int_const_int().callback->func3_int_const_int(x, xx);
    }
    else {
        return Stub_data.func3_int_const_int().stub_return;
    }
}

const void *const StubSimple::func4(MadeUp z, const MadeUp zz, const MadeUp & zzz, const MadeUp **const zzzz) {
    Stub_data.func4_MadeUp_const_MadeUp_const_MadeUp_const_MadeUp().call_counter++;
    Stub_data.func4_MadeUp_const_MadeUp_const_MadeUp_const_MadeUp().Param_z = z;
    Stub_data.func4_MadeUp_const_MadeUp_const_MadeUp_const_MadeUp().Param_zz = zz;
    Stub_data.func4_MadeUp_const_MadeUp_const_MadeUp_const_MadeUp().Param_zzz = const_cast<MadeUp*>(&zzz);
    Stub_data.func4_MadeUp_const_MadeUp_const_MadeUp_const_MadeUp().Param_zzzz = const_cast<MadeUp**>(zzzz);

    if (Stub_data.func4_MadeUp_const_MadeUp_const_MadeUp_const_MadeUp().callback != 0) {
        return Stub_data.func4_MadeUp_const_MadeUp_const_MadeUp_const_MadeUp().callback->func4_MadeUp_const_MadeUp_const_MadeUp_const_MadeUp(z, zz, zzz, zzzz);
    }
    else {
        return Stub_data.func4_MadeUp_const_MadeUp_const_MadeUp_const_MadeUp().stub_return;
    }
}

void StubSimple::operator=(const Simple & other) {
    Stub_data.opAssign_const_Simple().call_counter++;
    Stub_data.opAssign_const_Simple().Param_other = const_cast<Simple*>(&other);

    if (Stub_data.opAssign_const_Simple().callback != 0) {
        Stub_data.opAssign_const_Simple().callback->opAssign_const_Simple(other);
    }
}

StubSimple::StubSimple() {
}

StubSimple::StubSimple(char foo) {
}

StubSimple::~StubSimple() {
    Stub_data.StubDtor().call_counter++;

    if (Stub_data.StubDtor().callback != 0) {
        Stub_data.StubDtor().callback->StubDtor();
    }
}

StubInternalSimple::StubStubData& StubSimple::GetStub() {
    return Stub_data;
}

