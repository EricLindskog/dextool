#include "stub_class_no_virtual.hpp"

namespace StubInternalSimple {
StubCallbackSimple::Ifunc1* Stubfunc1::GetCallback() {
    return callback;
}

void Stubfunc1::SetCallback(StubCallbackSimple::Ifunc1* value) {
    callback = value;
}

unsigned Stubfunc1::GetCallCounter() const {
    return call_counter;
}

void Stubfunc1::ResetCallCounter() {
    call_counter = 0;
}

void StubInit(Stubfunc1* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc1);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSimple::Ifunc2* Stubfunc2::GetCallback() {
    return callback;
}

void Stubfunc2::SetCallback(StubCallbackSimple::Ifunc2* value) {
    callback = value;
}

unsigned Stubfunc2::GetCallCounter() const {
    return call_counter;
}

void Stubfunc2::ResetCallCounter() {
    call_counter = 0;
}

int& Stubfunc2::SetReturn() {
    return stub_return;
}

void StubInit(Stubfunc2* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc2);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSimple::Ifunc6_some_pointer* Stubfunc6_some_pointer::GetCallback() {
    return callback;
}

void Stubfunc6_some_pointer::SetCallback(StubCallbackSimple::Ifunc6_some_pointer* value) {
    callback = value;
}

unsigned Stubfunc6_some_pointer::GetCallCounter() const {
    return call_counter;
}

void Stubfunc6_some_pointer::ResetCallCounter() {
    call_counter = 0;
}

some_pointer Stubfunc6_some_pointer::GetParam_w() {
    return Param_w;
}

char *& Stubfunc6_some_pointer::SetReturn() {
    return stub_return;
}

void StubInit(Stubfunc6_some_pointer* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc6_some_pointer);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSimple::Ifunc7_intRef_charPtr* Stubfunc7_intRef_charPtr::GetCallback() {
    return callback;
}

void Stubfunc7_intRef_charPtr::SetCallback(StubCallbackSimple::Ifunc7_intRef_charPtr* value) {
    callback = value;
}

unsigned Stubfunc7_intRef_charPtr::GetCallCounter() const {
    return call_counter;
}

void Stubfunc7_intRef_charPtr::ResetCallCounter() {
    call_counter = 0;
}

int* Stubfunc7_intRef_charPtr::GetParam_y() {
    return Param_y;
}

char* Stubfunc7_intRef_charPtr::GetParam_yy() {
    return Param_yy;
}

float& Stubfunc7_intRef_charPtr::SetReturn() {
    return stub_return;
}

void StubInit(Stubfunc7_intRef_charPtr* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc7_intRef_charPtr);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSimple::Ifunc3_int_constint* Stubfunc3_int_constint::GetCallback() {
    return callback;
}

void Stubfunc3_int_constint::SetCallback(StubCallbackSimple::Ifunc3_int_constint* value) {
    callback = value;
}

unsigned Stubfunc3_int_constint::GetCallCounter() const {
    return call_counter;
}

void Stubfunc3_int_constint::ResetCallCounter() {
    call_counter = 0;
}

int Stubfunc3_int_constint::GetParam_x() {
    return Param_x;
}

int Stubfunc3_int_constint::GetParam_xx() {
    return Param_xx;
}

double& Stubfunc3_int_constint::SetReturn() {
    return stub_return;
}

void StubInit(Stubfunc3_int_constint* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc3_int_constint);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSimple::Ifunc4_MadeUp_constMadeUp_constMadeUpRef_constMadeUpPtrPtr* Stubfunc4_MadeUp_constMadeUp_constMadeUpRef_constMadeUpPtrPtr::GetCallback() {
    return callback;
}

void Stubfunc4_MadeUp_constMadeUp_constMadeUpRef_constMadeUpPtrPtr::SetCallback(StubCallbackSimple::Ifunc4_MadeUp_constMadeUp_constMadeUpRef_constMadeUpPtrPtr* value) {
    callback = value;
}

unsigned Stubfunc4_MadeUp_constMadeUp_constMadeUpRef_constMadeUpPtrPtr::GetCallCounter() const {
    return call_counter;
}

void Stubfunc4_MadeUp_constMadeUp_constMadeUpRef_constMadeUpPtrPtr::ResetCallCounter() {
    call_counter = 0;
}

MadeUp Stubfunc4_MadeUp_constMadeUp_constMadeUpRef_constMadeUpPtrPtr::GetParam_z() {
    return Param_z;
}

MadeUp Stubfunc4_MadeUp_constMadeUp_constMadeUpRef_constMadeUpPtrPtr::GetParam_zz() {
    return Param_zz;
}

MadeUp* Stubfunc4_MadeUp_constMadeUp_constMadeUpRef_constMadeUpPtrPtr::GetParam_zzz() {
    return Param_zzz;
}

MadeUp** Stubfunc4_MadeUp_constMadeUp_constMadeUpRef_constMadeUpPtrPtr::GetParam_zzzz() {
    return Param_zzzz;
}

void *& Stubfunc4_MadeUp_constMadeUp_constMadeUpRef_constMadeUpPtrPtr::SetReturn() {
    return stub_return;
}

void StubInit(Stubfunc4_MadeUp_constMadeUp_constMadeUpRef_constMadeUpPtrPtr* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc4_MadeUp_constMadeUp_constMadeUpRef_constMadeUpPtrPtr);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSimple::IopAssign_constSimpleRef* StubopAssign_constSimpleRef::GetCallback() {
    return callback;
}

void StubopAssign_constSimpleRef::SetCallback(StubCallbackSimple::IopAssign_constSimpleRef* value) {
    callback = value;
}

unsigned StubopAssign_constSimpleRef::GetCallCounter() const {
    return call_counter;
}

void StubopAssign_constSimpleRef::ResetCallCounter() {
    call_counter = 0;
}

Simple* StubopAssign_constSimpleRef::GetParam_other() {
    return Param_other;
}

void StubInit(StubopAssign_constSimpleRef* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(StubopAssign_constSimpleRef);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSimple::Iprot* Stubprot::GetCallback() {
    return callback;
}

void Stubprot::SetCallback(StubCallbackSimple::Iprot* value) {
    callback = value;
}

unsigned Stubprot::GetCallCounter() const {
    return call_counter;
}

void Stubprot::ResetCallCounter() {
    call_counter = 0;
}

void StubInit(Stubprot* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubprot);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSimple::Ipriv* Stubpriv::GetCallback() {
    return callback;
}

void Stubpriv::SetCallback(StubCallbackSimple::Ipriv* value) {
    callback = value;
}

unsigned Stubpriv::GetCallCounter() const {
    return call_counter;
}

void Stubpriv::ResetCallCounter() {
    call_counter = 0;
}

void StubInit(Stubpriv* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubpriv);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSimple::IStubDtor* StubStubDtor::GetCallback() {
    return callback;
}

void StubStubDtor::SetCallback(StubCallbackSimple::IStubDtor* value) {
    callback = value;
}

unsigned StubStubDtor::GetCallCounter() const {
    return call_counter;
}

void StubStubDtor::ResetCallCounter() {
    call_counter = 0;
}

void StubInit(StubStubDtor* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(StubStubDtor);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubStubData::StubStubData() {
    StubInit(&stub_func1);
    StubInit(&stub_func2);
    StubInit(&stub_func6_some_pointer);
    StubInit(&stub_func7_intRef_charPtr);
    StubInit(&stub_func3_int_constint);
    StubInit(&stub_func4_MadeUp_constMadeUp_constMadeUpRef_constMadeUpPtrPtr);
    StubInit(&stub_opAssign_constSimpleRef);
    StubInit(&stub_prot);
    StubInit(&stub_priv);
    StubInit(&stub_StubDtor);
}

StubStubData::~StubStubData() {
}

StubInternalSimple::Stubfunc1& StubStubData::func1() {
    return stub_func1;
}

StubInternalSimple::Stubfunc2& StubStubData::func2() {
    return stub_func2;
}

StubInternalSimple::Stubfunc6_some_pointer& StubStubData::func6_some_pointer() {
    return stub_func6_some_pointer;
}

StubInternalSimple::Stubfunc7_intRef_charPtr& StubStubData::func7_intRef_charPtr() {
    return stub_func7_intRef_charPtr;
}

StubInternalSimple::Stubfunc3_int_constint& StubStubData::func3_int_constint() {
    return stub_func3_int_constint;
}

StubInternalSimple::Stubfunc4_MadeUp_constMadeUp_constMadeUpRef_constMadeUpPtrPtr& StubStubData::func4_MadeUp_constMadeUp_constMadeUpRef_constMadeUpPtrPtr() {
    return stub_func4_MadeUp_constMadeUp_constMadeUpRef_constMadeUpPtrPtr;
}

StubInternalSimple::StubopAssign_constSimpleRef& StubStubData::opAssign_constSimpleRef() {
    return stub_opAssign_constSimpleRef;
}

StubInternalSimple::Stubprot& StubStubData::prot() {
    return stub_prot;
}

StubInternalSimple::Stubpriv& StubStubData::priv() {
    return stub_priv;
}

StubInternalSimple::StubStubDtor& StubStubData::StubDtor() {
    return stub_StubDtor;
}

::StubSimple** stubstubsimplemanager_pool = 0;
unsigned stubstubsimplemanager_size = 0;
unsigned stubstubsimplemanager_next = 0;

void StubStubManagerGrowPool() {
    if (stubstubsimplemanager_pool == 0) {
        stubstubsimplemanager_pool = new ::StubSimple*[2];
        stubstubsimplemanager_size = 2;
        stubstubsimplemanager_next = 0;
    }
    else {
        ::StubSimple** old = stubstubsimplemanager_pool;
        unsigned old_size = stubstubsimplemanager_size;
        stubstubsimplemanager_size = stubstubsimplemanager_size * 2;
        stubstubsimplemanager_pool = new ::StubSimple*[stubstubsimplemanager_size];
        for (unsigned i = 0; i < old_size; ++i) {
            stubstubsimplemanager_pool[i] = old[i];
        }
        delete [] old;
    }
}

void StubStubManagerRegister(::StubSimple* instance) {
    if (stubstubsimplemanager_pool == 0 || stubstubsimplemanager_next == stubstubsimplemanager_size) {
        StubStubManagerGrowPool();
    }
    stubstubsimplemanager_pool[stubstubsimplemanager_next] = instance;
    stubstubsimplemanager_next += 1;
}

void StubStubManagerUnRegister(::StubSimple* instance) {
    for (unsigned i = 0; i < stubstubsimplemanager_size; ++i) {
        if (stubstubsimplemanager_pool[i] == instance) {
            stubstubsimplemanager_pool[i] = 0;
            break;
        }
    }
}

} //NS:StubInternalSimple

StubStubSimpleManager::StubStubSimpleManager() {
}

StubStubSimpleManager::~StubStubSimpleManager() {
    for (unsigned i = 0; i < ::StubInternalSimple::stubstubsimplemanager_size; ++i) {
        if (::StubInternalSimple::stubstubsimplemanager_pool[i] != 0) {
            delete ::StubInternalSimple::stubstubsimplemanager_pool[i];
        }
    }
    delete [] ::StubInternalSimple::stubstubsimplemanager_pool;
    ::StubInternalSimple::stubstubsimplemanager_pool = 0;
    ::StubInternalSimple::stubstubsimplemanager_size = 0;
    ::StubInternalSimple::stubstubsimplemanager_next = 0;
}

::StubSimple* StubStubSimpleManager::GetInstance() {
    if (::StubInternalSimple::stubstubsimplemanager_size > 0) {
        return ::StubInternalSimple::stubstubsimplemanager_pool[0];
    }
    return reinterpret_cast< ::StubSimple*>(0);
}

::StubSimple* StubStubSimpleManager::GetInstance(unsigned nth) {
    if (::StubInternalSimple::stubstubsimplemanager_size > nth) {
        return ::StubInternalSimple::stubstubsimplemanager_pool[nth];
    }
    return reinterpret_cast< ::StubSimple*>(0);
}

void StubSimple::func1() {
    Stub_data.func1().call_counter++;

    if (Stub_data.func1().callback != 0) {
        Stub_data.func1().callback->func1();
    }
}

int StubSimple::func2() {
    Stub_data.func2().call_counter++;

    if (Stub_data.func2().callback != 0) {
        return Stub_data.func2().callback->func2();
    }
    else {
        return Stub_data.func2().stub_return;
    }
}

char * StubSimple::func6(some_pointer w) {
    Stub_data.func6_some_pointer().call_counter++;
    Stub_data.func6_some_pointer().Param_w = w;

    if (Stub_data.func6_some_pointer().callback != 0) {
        return Stub_data.func6_some_pointer().callback->func6_some_pointer(w);
    }
    else {
        return Stub_data.func6_some_pointer().stub_return;
    }
}

float StubSimple::func7(int & y, char * yy) {
    Stub_data.func7_intRef_charPtr().call_counter++;
    Stub_data.func7_intRef_charPtr().Param_y = &y;
    Stub_data.func7_intRef_charPtr().Param_yy = yy;

    if (Stub_data.func7_intRef_charPtr().callback != 0) {
        return Stub_data.func7_intRef_charPtr().callback->func7_intRef_charPtr(y, yy);
    }
    else {
        return Stub_data.func7_intRef_charPtr().stub_return;
    }
}

const double StubSimple::func3(int x, const int xx) {
    Stub_data.func3_int_constint().call_counter++;
    Stub_data.func3_int_constint().Param_x = x;
    Stub_data.func3_int_constint().Param_xx = xx;

    if (Stub_data.func3_int_constint().callback != 0) {
        return Stub_data.func3_int_constint().callback->func3_int_constint(x, xx);
    }
    else {
        return Stub_data.func3_int_constint().stub_return;
    }
}

const void *const StubSimple::func4(MadeUp z, const MadeUp zz, const MadeUp & zzz, const MadeUp **const zzzz) {
    Stub_data.func4_MadeUp_constMadeUp_constMadeUpRef_constMadeUpPtrPtr().call_counter++;
    Stub_data.func4_MadeUp_constMadeUp_constMadeUpRef_constMadeUpPtrPtr().Param_z = z;
    Stub_data.func4_MadeUp_constMadeUp_constMadeUpRef_constMadeUpPtrPtr().Param_zz = zz;
    Stub_data.func4_MadeUp_constMadeUp_constMadeUpRef_constMadeUpPtrPtr().Param_zzz = const_cast<MadeUp*>(&zzz);
    Stub_data.func4_MadeUp_constMadeUp_constMadeUpRef_constMadeUpPtrPtr().Param_zzzz = const_cast<MadeUp**>(zzzz);

    if (Stub_data.func4_MadeUp_constMadeUp_constMadeUpRef_constMadeUpPtrPtr().callback != 0) {
        return Stub_data.func4_MadeUp_constMadeUp_constMadeUpRef_constMadeUpPtrPtr().callback->func4_MadeUp_constMadeUp_constMadeUpRef_constMadeUpPtrPtr(z, zz, zzz, zzzz);
    }
    else {
        return Stub_data.func4_MadeUp_constMadeUp_constMadeUpRef_constMadeUpPtrPtr().stub_return;
    }
}

void StubSimple::operator=(const Simple & other) {
    Stub_data.opAssign_constSimpleRef().call_counter++;
    Stub_data.opAssign_constSimpleRef().Param_other = const_cast<Simple*>(&other);

    if (Stub_data.opAssign_constSimpleRef().callback != 0) {
        Stub_data.opAssign_constSimpleRef().callback->opAssign_constSimpleRef(other);
    }
}

void StubSimple::prot() {
    Stub_data.prot().call_counter++;

    if (Stub_data.prot().callback != 0) {
        Stub_data.prot().callback->prot();
    }
}

void StubSimple::priv() {
    Stub_data.priv().call_counter++;

    if (Stub_data.priv().callback != 0) {
        Stub_data.priv().callback->priv();
    }
}

StubSimple::StubSimple() {
    ::StubInternalSimple::StubStubManagerRegister(this);
}

StubSimple::StubSimple(char foo) {
    ::StubInternalSimple::StubStubManagerRegister(this);
}

StubSimple::~StubSimple() {
    ::StubInternalSimple::StubStubManagerUnRegister(this);
    Stub_data.StubDtor().call_counter++;

    if (Stub_data.StubDtor().callback != 0) {
        Stub_data.StubDtor().callback->StubDtor();
    }
}

StubInternalSimple::StubStubData& StubSimple::GetStub() {
    return Stub_data;
}

