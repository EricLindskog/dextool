#ifndef stub_class_inherit_hpp
#define stub_class_inherit_hpp
#include "class_inherit.hpp"

class StubFoo;

namespace StubCallbackFoo {
struct Ifunc2 { virtual void func2() = 0; };
struct Ifunc3 { virtual void func3() = 0; };
} //NS:StubCallbackFoo

namespace StubInternalFoo {
class Stubfunc2 {
public:
    StubCallbackFoo::Ifunc2* GetCallback();
    void SetCallback(StubCallbackFoo::Ifunc2* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
private:
    friend class ::StubFoo;

    StubCallbackFoo::Ifunc2* callback;
    unsigned call_counter;
};
void StubInit(Stubfunc2* value);

class Stubfunc3 {
public:
    StubCallbackFoo::Ifunc3* GetCallback();
    void SetCallback(StubCallbackFoo::Ifunc3* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
private:
    friend class ::StubFoo;

    StubCallbackFoo::Ifunc3* callback;
    unsigned call_counter;
};
void StubInit(Stubfunc3* value);

class StubStubData {
public:
    StubStubData();
    ~StubStubData();

    StubInternalFoo::Stubfunc2& func2();
    StubInternalFoo::Stubfunc3& func3();

private:
    StubInternalFoo::Stubfunc2 stub_func2;
    StubInternalFoo::Stubfunc3 stub_func3;
};

void StubStubManagerRegister(::StubFoo* instance);
void StubStubManagerUnRegister(::StubFoo* instance);
} //NS:StubInternalFoo

class StubStubFooManager {
public:
    StubStubFooManager();
    ~StubStubFooManager();

    /// Get the first instance created.
    /// @return Pointer to instance or null if none is created.
    ::StubFoo* GetInstance();

    /// Get the Nth instance created.
    /// @return Pointer to instance or null if none was found.
    ::StubFoo* GetInstance(unsigned nth);
};

class StubFoo : public Foo {
public:
    virtual void func2();
    virtual void func3();
public:
    StubInternalFoo::StubStubData& GetStub();

private:
    mutable StubInternalFoo::StubStubData Stub_data;
};

namespace BarSpace {
class StubBar;

namespace StubCallbackBar {
struct Ifunc5 { virtual void func5() = 0; };
} //NS:StubCallbackBar

namespace StubInternalBar {
class Stubfunc5 {
public:
    StubCallbackBar::Ifunc5* GetCallback();
    void SetCallback(StubCallbackBar::Ifunc5* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
private:
    friend class ::BarSpace::StubBar;

    StubCallbackBar::Ifunc5* callback;
    unsigned call_counter;
};
void StubInit(Stubfunc5* value);

class StubStubData {
public:
    StubStubData();
    ~StubStubData();

    StubInternalBar::Stubfunc5& func5();

private:
    StubInternalBar::Stubfunc5 stub_func5;
};

void StubStubManagerRegister(BarSpace::StubBar* instance);
void StubStubManagerUnRegister(BarSpace::StubBar* instance);
} //NS:StubInternalBar

class StubStubBarManager {
public:
    StubStubBarManager();
    ~StubStubBarManager();

    /// Get the first instance created.
    /// @return Pointer to instance or null if none is created.
    BarSpace::StubBar* GetInstance();

    /// Get the Nth instance created.
    /// @return Pointer to instance or null if none was found.
    BarSpace::StubBar* GetInstance(unsigned nth);
};

class StubBar : public BarSpace::Bar {
public:
    virtual void func5();
public:
    StubInternalBar::StubStubData& GetStub();

private:
    mutable StubInternalBar::StubStubData Stub_data;
};

} //NS:BarSpace

class StubWarp;

namespace StubCallbackWarp {
struct Ifunc2 { virtual void func2() = 0; };
struct Ifunc3 { virtual void func3() = 0; };
struct Ifunc4 { virtual void func4() = 0; };
} //NS:StubCallbackWarp

namespace StubInternalWarp {
class Stubfunc2 {
public:
    StubCallbackWarp::Ifunc2* GetCallback();
    void SetCallback(StubCallbackWarp::Ifunc2* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
private:
    friend class ::StubWarp;

    StubCallbackWarp::Ifunc2* callback;
    unsigned call_counter;
};
void StubInit(Stubfunc2* value);

class Stubfunc3 {
public:
    StubCallbackWarp::Ifunc3* GetCallback();
    void SetCallback(StubCallbackWarp::Ifunc3* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
private:
    friend class ::StubWarp;

    StubCallbackWarp::Ifunc3* callback;
    unsigned call_counter;
};
void StubInit(Stubfunc3* value);

class Stubfunc4 {
public:
    StubCallbackWarp::Ifunc4* GetCallback();
    void SetCallback(StubCallbackWarp::Ifunc4* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
private:
    friend class ::StubWarp;

    StubCallbackWarp::Ifunc4* callback;
    unsigned call_counter;
};
void StubInit(Stubfunc4* value);

class StubStubData {
public:
    StubStubData();
    ~StubStubData();

    StubInternalWarp::Stubfunc2& func2();
    StubInternalWarp::Stubfunc3& func3();
    StubInternalWarp::Stubfunc4& func4();

private:
    StubInternalWarp::Stubfunc2 stub_func2;
    StubInternalWarp::Stubfunc3 stub_func3;
    StubInternalWarp::Stubfunc4 stub_func4;
};

void StubStubManagerRegister(::StubWarp* instance);
void StubStubManagerUnRegister(::StubWarp* instance);
} //NS:StubInternalWarp

class StubStubWarpManager {
public:
    StubStubWarpManager();
    ~StubStubWarpManager();

    /// Get the first instance created.
    /// @return Pointer to instance or null if none is created.
    ::StubWarp* GetInstance();

    /// Get the Nth instance created.
    /// @return Pointer to instance or null if none was found.
    ::StubWarp* GetInstance(unsigned nth);
};

class StubWarp : public Warp {
public:
    virtual void func2();
    virtual void func3();
private:
    virtual void func4();
public:
    StubInternalWarp::StubStubData& GetStub();

private:
    mutable StubInternalWarp::StubStubData Stub_data;
};

class StubSmurf;

namespace StubCallbackSmurf {
struct Ifunc2 { virtual void func2() = 0; };
struct Ifunc3 { virtual void func3() = 0; };
struct Ifunc5 { virtual void func5() = 0; };
struct Ifunc4 { virtual void func4() = 0; };
struct IStubDtor { virtual void StubDtor() = 0; };
} //NS:StubCallbackSmurf

namespace StubInternalSmurf {
class Stubfunc2 {
public:
    StubCallbackSmurf::Ifunc2* GetCallback();
    void SetCallback(StubCallbackSmurf::Ifunc2* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
private:
    friend class ::StubSmurf;

    StubCallbackSmurf::Ifunc2* callback;
    unsigned call_counter;
};
void StubInit(Stubfunc2* value);

class Stubfunc3 {
public:
    StubCallbackSmurf::Ifunc3* GetCallback();
    void SetCallback(StubCallbackSmurf::Ifunc3* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
private:
    friend class ::StubSmurf;

    StubCallbackSmurf::Ifunc3* callback;
    unsigned call_counter;
};
void StubInit(Stubfunc3* value);

class Stubfunc5 {
public:
    StubCallbackSmurf::Ifunc5* GetCallback();
    void SetCallback(StubCallbackSmurf::Ifunc5* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
private:
    friend class ::StubSmurf;

    StubCallbackSmurf::Ifunc5* callback;
    unsigned call_counter;
};
void StubInit(Stubfunc5* value);

class Stubfunc4 {
public:
    StubCallbackSmurf::Ifunc4* GetCallback();
    void SetCallback(StubCallbackSmurf::Ifunc4* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
private:
    friend class ::StubSmurf;

    StubCallbackSmurf::Ifunc4* callback;
    unsigned call_counter;
};
void StubInit(Stubfunc4* value);

class StubStubDtor {
public:
    StubCallbackSmurf::IStubDtor* GetCallback();
    void SetCallback(StubCallbackSmurf::IStubDtor* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
private:
    friend class ::StubSmurf;

    StubCallbackSmurf::IStubDtor* callback;
    unsigned call_counter;
};
void StubInit(StubStubDtor* value);

class StubStubData {
public:
    StubStubData();
    ~StubStubData();

    StubInternalSmurf::Stubfunc2& func2();
    StubInternalSmurf::Stubfunc3& func3();
    StubInternalSmurf::Stubfunc5& func5();
    StubInternalSmurf::Stubfunc4& func4();
    StubInternalSmurf::StubStubDtor& StubDtor();

private:
    StubInternalSmurf::Stubfunc2 stub_func2;
    StubInternalSmurf::Stubfunc3 stub_func3;
    StubInternalSmurf::Stubfunc5 stub_func5;
    StubInternalSmurf::Stubfunc4 stub_func4;
    StubInternalSmurf::StubStubDtor stub_StubDtor;
};

void StubStubManagerRegister(::StubSmurf* instance);
void StubStubManagerUnRegister(::StubSmurf* instance);
} //NS:StubInternalSmurf

class StubStubSmurfManager {
public:
    StubStubSmurfManager();
    ~StubStubSmurfManager();

    /// Get the first instance created.
    /// @return Pointer to instance or null if none is created.
    ::StubSmurf* GetInstance();

    /// Get the Nth instance created.
    /// @return Pointer to instance or null if none was found.
    ::StubSmurf* GetInstance(unsigned nth);
};

class StubSmurf : public Smurf {
public:
    virtual void func2();
    virtual void func3();
public:
    virtual void func5();
private:
    virtual void func4();
public:
    StubSmurf();
    virtual ~StubSmurf();

public:
    StubInternalSmurf::StubStubData& GetStub();

private:
    mutable StubInternalSmurf::StubStubData Stub_data;
};

class StubDaddySmurf;

namespace StubCallbackDaddySmurf {
struct Ifunc2 { virtual void func2() = 0; };
struct Ifunc3 { virtual void func3() = 0; };
struct Ifunc4 { virtual void func4() = 0; };
struct IStubDtor { virtual void StubDtor() = 0; };
} //NS:StubCallbackDaddySmurf

namespace StubInternalDaddySmurf {
class Stubfunc2 {
public:
    StubCallbackDaddySmurf::Ifunc2* GetCallback();
    void SetCallback(StubCallbackDaddySmurf::Ifunc2* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
private:
    friend class ::StubDaddySmurf;

    StubCallbackDaddySmurf::Ifunc2* callback;
    unsigned call_counter;
};
void StubInit(Stubfunc2* value);

class Stubfunc3 {
public:
    StubCallbackDaddySmurf::Ifunc3* GetCallback();
    void SetCallback(StubCallbackDaddySmurf::Ifunc3* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
private:
    friend class ::StubDaddySmurf;

    StubCallbackDaddySmurf::Ifunc3* callback;
    unsigned call_counter;
};
void StubInit(Stubfunc3* value);

class Stubfunc4 {
public:
    StubCallbackDaddySmurf::Ifunc4* GetCallback();
    void SetCallback(StubCallbackDaddySmurf::Ifunc4* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
private:
    friend class ::StubDaddySmurf;

    StubCallbackDaddySmurf::Ifunc4* callback;
    unsigned call_counter;
};
void StubInit(Stubfunc4* value);

class StubStubDtor {
public:
    StubCallbackDaddySmurf::IStubDtor* GetCallback();
    void SetCallback(StubCallbackDaddySmurf::IStubDtor* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
private:
    friend class ::StubDaddySmurf;

    StubCallbackDaddySmurf::IStubDtor* callback;
    unsigned call_counter;
};
void StubInit(StubStubDtor* value);

class StubStubData {
public:
    StubStubData();
    ~StubStubData();

    StubInternalDaddySmurf::Stubfunc2& func2();
    StubInternalDaddySmurf::Stubfunc3& func3();
    StubInternalDaddySmurf::Stubfunc4& func4();
    StubInternalDaddySmurf::StubStubDtor& StubDtor();

private:
    StubInternalDaddySmurf::Stubfunc2 stub_func2;
    StubInternalDaddySmurf::Stubfunc3 stub_func3;
    StubInternalDaddySmurf::Stubfunc4 stub_func4;
    StubInternalDaddySmurf::StubStubDtor stub_StubDtor;
};

void StubStubManagerRegister(::StubDaddySmurf* instance);
void StubStubManagerUnRegister(::StubDaddySmurf* instance);
} //NS:StubInternalDaddySmurf

class StubStubDaddySmurfManager {
public:
    StubStubDaddySmurfManager();
    ~StubStubDaddySmurfManager();

    /// Get the first instance created.
    /// @return Pointer to instance or null if none is created.
    ::StubDaddySmurf* GetInstance();

    /// Get the Nth instance created.
    /// @return Pointer to instance or null if none was found.
    ::StubDaddySmurf* GetInstance(unsigned nth);
};

class StubDaddySmurf : public DaddySmurf {
public:
    virtual void func2();
    virtual void func3();
private:
    virtual void func4();
public:
    StubDaddySmurf();
    virtual ~StubDaddySmurf();

public:
    StubInternalDaddySmurf::StubStubData& GetStub();

private:
    mutable StubInternalDaddySmurf::StubStubData Stub_data;
};

#endif // stub_class_inherit_hpp
