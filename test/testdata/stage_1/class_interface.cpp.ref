#include "stub_class_interface.hpp"

namespace StubInternalSimple {
void StubInit(Stubfunc1* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc1);
    for (; d != end; ++d) {
        *d = 0;
    }
}

void StubInit(Stubfunc2_int* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc2_int);
    for (; d != end; ++d) {
        *d = 0;
    }
}

void StubInit(Stubfunc2_double* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc2_double);
    for (; d != end; ++d) {
        *d = 0;
    }
}

void StubInit(StubopAssign_Simple* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(StubopAssign_Simple);
    for (; d != end; ++d) {
        *d = 0;
    }
}

void StubInit(Stubfunc3* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc3);
    for (; d != end; ++d) {
        *d = 0;
    }
}

void StubInit(StubStubDtor* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(StubStubDtor);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubStubData::StubStubData() {
    StubInit(&stub_func1);
    StubInit(&stub_func2_int);
    StubInit(&stub_func2_double);
    StubInit(&stub_opAssign_Simple);
    StubInit(&stub_func3);
    StubInit(&stub_StubDtor);
}

StubStubData::~StubStubData() {
}

StubInternalSimple::Stubfunc1& StubStubData::func1() {
    return stub_func1;
}

StubInternalSimple::Stubfunc2_int& StubStubData::func2_int() {
    return stub_func2_int;
}

StubInternalSimple::Stubfunc2_double& StubStubData::func2_double() {
    return stub_func2_double;
}

StubInternalSimple::StubopAssign_Simple& StubStubData::opAssign_Simple() {
    return stub_opAssign_Simple;
}

StubInternalSimple::Stubfunc3& StubStubData::func3() {
    return stub_func3;
}

StubInternalSimple::StubStubDtor& StubStubData::StubDtor() {
    return stub_StubDtor;
}

} //NS:StubInternalSimple

int StubSimple::func1() {
    Stub_data.func1().call_counter++;

    if (Stub_data.func1().callback != 0) {
        return Stub_data.func1().callback->func1();
    }
    else {
        return Stub_data.func1().stub_return;
    }
}

void StubSimple::func2(int x) {
    Stub_data.func2_int().call_counter++;
    Stub_data.func2_int().param_x = x;

    if (Stub_data.func2_int().callback != 0) {
        Stub_data.func2_int().callback->func2_int(x);
    }
}

void StubSimple::func2(double x) {
    Stub_data.func2_double().call_counter++;
    Stub_data.func2_double().param_x = x;

    if (Stub_data.func2_double().callback != 0) {
        Stub_data.func2_double().callback->func2_double(x);
    }
}

void StubSimple::operator=(const Simple & other) {
    Stub_data.opAssign_Simple().call_counter++;
    Stub_data.opAssign_Simple().param_other = const_cast<Simple*>(&other);

    if (Stub_data.opAssign_Simple().callback != 0) {
        Stub_data.opAssign_Simple().callback->opAssign_Simple(other);
    }
}

void StubSimple::func3() {
    Stub_data.func3().call_counter++;

    if (Stub_data.func3().callback != 0) {
        Stub_data.func3().callback->func3();
    }
}

StubSimple::StubSimple() {
}

StubSimple::~StubSimple() {
    Stub_data.StubDtor().call_counter++;

    if (Stub_data.StubDtor().callback != 0) {
        Stub_data.StubDtor().callback->StubDtor();
    }
}

StubInternalSimple::StubStubData& StubSimple::GetStub() {
    return Stub_data;
}

