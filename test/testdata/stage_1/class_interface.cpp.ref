#include "stub_class_interface.hpp"

namespace StubInternalSimple {
StubCallbackSimple::Ifunc1* Stubfunc1::GetCallback() {
    return callback;
}

void Stubfunc1::SetCallback(StubCallbackSimple::Ifunc1* value) {
    callback = value;
}

unsigned Stubfunc1::GetCallCounter() const {
    return call_counter;
}

void Stubfunc1::ResetCallCounter() {
    call_counter = 0;
}

int& Stubfunc1::SetReturn() {
    return stub_return;
}

void StubInit(Stubfunc1* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc1);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSimple::Ifunc2_int* Stubfunc2_int::GetCallback() {
    return callback;
}

void Stubfunc2_int::SetCallback(StubCallbackSimple::Ifunc2_int* value) {
    callback = value;
}

unsigned Stubfunc2_int::GetCallCounter() const {
    return call_counter;
}

void Stubfunc2_int::ResetCallCounter() {
    call_counter = 0;
}

int Stubfunc2_int::GetParam_x() {
    return Param_x;
}

void StubInit(Stubfunc2_int* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc2_int);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSimple::Ifunc2_double* Stubfunc2_double::GetCallback() {
    return callback;
}

void Stubfunc2_double::SetCallback(StubCallbackSimple::Ifunc2_double* value) {
    callback = value;
}

unsigned Stubfunc2_double::GetCallCounter() const {
    return call_counter;
}

void Stubfunc2_double::ResetCallCounter() {
    call_counter = 0;
}

double Stubfunc2_double::GetParam_x() {
    return Param_x;
}

void StubInit(Stubfunc2_double* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc2_double);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSimple::IopAssign_Simple* StubopAssign_Simple::GetCallback() {
    return callback;
}

void StubopAssign_Simple::SetCallback(StubCallbackSimple::IopAssign_Simple* value) {
    callback = value;
}

unsigned StubopAssign_Simple::GetCallCounter() const {
    return call_counter;
}

void StubopAssign_Simple::ResetCallCounter() {
    call_counter = 0;
}

Simple* StubopAssign_Simple::GetParam_other() {
    return Param_other;
}

void StubInit(StubopAssign_Simple* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(StubopAssign_Simple);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSimple::Ifunc3* Stubfunc3::GetCallback() {
    return callback;
}

void Stubfunc3::SetCallback(StubCallbackSimple::Ifunc3* value) {
    callback = value;
}

unsigned Stubfunc3::GetCallCounter() const {
    return call_counter;
}

void Stubfunc3::ResetCallCounter() {
    call_counter = 0;
}

void StubInit(Stubfunc3* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc3);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSimple::IStubDtor* StubStubDtor::GetCallback() {
    return callback;
}

void StubStubDtor::SetCallback(StubCallbackSimple::IStubDtor* value) {
    callback = value;
}

unsigned StubStubDtor::GetCallCounter() const {
    return call_counter;
}

void StubStubDtor::ResetCallCounter() {
    call_counter = 0;
}

void StubInit(StubStubDtor* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(StubStubDtor);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubStubData::StubStubData() {
    StubInit(&stub_func1);
    StubInit(&stub_func2_int);
    StubInit(&stub_func2_double);
    StubInit(&stub_opAssign_Simple);
    StubInit(&stub_func3);
    StubInit(&stub_StubDtor);
}

StubStubData::~StubStubData() {
}

StubInternalSimple::Stubfunc1& StubStubData::func1() {
    return stub_func1;
}

StubInternalSimple::Stubfunc2_int& StubStubData::func2_int() {
    return stub_func2_int;
}

StubInternalSimple::Stubfunc2_double& StubStubData::func2_double() {
    return stub_func2_double;
}

StubInternalSimple::StubopAssign_Simple& StubStubData::opAssign_Simple() {
    return stub_opAssign_Simple;
}

StubInternalSimple::Stubfunc3& StubStubData::func3() {
    return stub_func3;
}

StubInternalSimple::StubStubDtor& StubStubData::StubDtor() {
    return stub_StubDtor;
}

} //NS:StubInternalSimple

int StubSimple::func1() {
    Stub_data.func1().call_counter++;

    if (Stub_data.func1().callback != 0) {
        return Stub_data.func1().callback->func1();
    }
    else {
        return Stub_data.func1().stub_return;
    }
}

void StubSimple::func2(int x) {
    Stub_data.func2_int().call_counter++;
    Stub_data.func2_int().Param_x = x;

    if (Stub_data.func2_int().callback != 0) {
        Stub_data.func2_int().callback->func2_int(x);
    }
}

void StubSimple::func2(double x) {
    Stub_data.func2_double().call_counter++;
    Stub_data.func2_double().Param_x = x;

    if (Stub_data.func2_double().callback != 0) {
        Stub_data.func2_double().callback->func2_double(x);
    }
}

void StubSimple::operator=(const Simple & other) {
    Stub_data.opAssign_Simple().call_counter++;
    Stub_data.opAssign_Simple().Param_other = const_cast<Simple*>(&other);

    if (Stub_data.opAssign_Simple().callback != 0) {
        Stub_data.opAssign_Simple().callback->opAssign_Simple(other);
    }
}

void StubSimple::func3() {
    Stub_data.func3().call_counter++;

    if (Stub_data.func3().callback != 0) {
        Stub_data.func3().callback->func3();
    }
}

StubSimple::StubSimple() {
}

StubSimple::~StubSimple() {
    Stub_data.StubDtor().call_counter++;

    if (Stub_data.StubDtor().callback != 0) {
        Stub_data.StubDtor().callback->StubDtor();
    }
}

StubInternalSimple::StubStubData& StubSimple::GetStub() {
    return Stub_data;
}

