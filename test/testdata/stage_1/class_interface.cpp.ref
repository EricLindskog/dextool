#include "stub_class_interface.hpp"

namespace StubInternalSimple {
StubCallbackSimple::Ifunc1* Stubfunc1::GetCallback() {
    return callback;
}

void Stubfunc1::SetCallback(StubCallbackSimple::Ifunc1* value) {
    callback = value;
}

unsigned Stubfunc1::GetCallCounter() const {
    return call_counter;
}

void Stubfunc1::ResetCallCounter() {
    call_counter = 0;
}

int& Stubfunc1::SetReturn() {
    return stub_return;
}

void StubInit(Stubfunc1* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc1);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSimple::Ifunc2_int* Stubfunc2_int::GetCallback() {
    return callback;
}

void Stubfunc2_int::SetCallback(StubCallbackSimple::Ifunc2_int* value) {
    callback = value;
}

unsigned Stubfunc2_int::GetCallCounter() const {
    return call_counter;
}

void Stubfunc2_int::ResetCallCounter() {
    call_counter = 0;
}

int Stubfunc2_int::GetParam_x() {
    return Param_x;
}

void StubInit(Stubfunc2_int* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc2_int);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSimple::Ifunc2_double* Stubfunc2_double::GetCallback() {
    return callback;
}

void Stubfunc2_double::SetCallback(StubCallbackSimple::Ifunc2_double* value) {
    callback = value;
}

unsigned Stubfunc2_double::GetCallCounter() const {
    return call_counter;
}

void Stubfunc2_double::ResetCallCounter() {
    call_counter = 0;
}

double Stubfunc2_double::GetParam_x() {
    return Param_x;
}

void StubInit(Stubfunc2_double* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc2_double);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSimple::Ifunc2_doublePtr* Stubfunc2_doublePtr::GetCallback() {
    return callback;
}

void Stubfunc2_doublePtr::SetCallback(StubCallbackSimple::Ifunc2_doublePtr* value) {
    callback = value;
}

unsigned Stubfunc2_doublePtr::GetCallCounter() const {
    return call_counter;
}

void Stubfunc2_doublePtr::ResetCallCounter() {
    call_counter = 0;
}

double* Stubfunc2_doublePtr::GetParam_x() {
    return Param_x;
}

void StubInit(Stubfunc2_doublePtr* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc2_doublePtr);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSimple::Ifunc3_long_long* Stubfunc3_long_long::GetCallback() {
    return callback;
}

void Stubfunc3_long_long::SetCallback(StubCallbackSimple::Ifunc3_long_long* value) {
    callback = value;
}

unsigned Stubfunc3_long_long::GetCallCounter() const {
    return call_counter;
}

void Stubfunc3_long_long::ResetCallCounter() {
    call_counter = 0;
}

long Stubfunc3_long_long::GetParam_x() {
    return Param_x;
}

long Stubfunc3_long_long::GetParam_y() {
    return Param_y;
}

void StubInit(Stubfunc3_long_long* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc3_long_long);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSimple::Ifunc3_longlong* Stubfunc3_longlong::GetCallback() {
    return callback;
}

void Stubfunc3_longlong::SetCallback(StubCallbackSimple::Ifunc3_longlong* value) {
    callback = value;
}

unsigned Stubfunc3_longlong::GetCallCounter() const {
    return call_counter;
}

void Stubfunc3_longlong::ResetCallCounter() {
    call_counter = 0;
}

long long Stubfunc3_longlong::GetParam_x() {
    return Param_x;
}

void StubInit(Stubfunc3_longlong* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc3_longlong);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSimple::IopAssign_constSimpleRef* StubopAssign_constSimpleRef::GetCallback() {
    return callback;
}

void StubopAssign_constSimpleRef::SetCallback(StubCallbackSimple::IopAssign_constSimpleRef* value) {
    callback = value;
}

unsigned StubopAssign_constSimpleRef::GetCallCounter() const {
    return call_counter;
}

void StubopAssign_constSimpleRef::ResetCallCounter() {
    call_counter = 0;
}

Simple* StubopAssign_constSimpleRef::GetParam_other() {
    return Param_other;
}

void StubInit(StubopAssign_constSimpleRef* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(StubopAssign_constSimpleRef);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSimple::Ifunc3* Stubfunc3::GetCallback() {
    return callback;
}

void Stubfunc3::SetCallback(StubCallbackSimple::Ifunc3* value) {
    callback = value;
}

unsigned Stubfunc3::GetCallCounter() const {
    return call_counter;
}

void Stubfunc3::ResetCallCounter() {
    call_counter = 0;
}

void StubInit(Stubfunc3* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc3);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSimple::IStubDtor* StubStubDtor::GetCallback() {
    return callback;
}

void StubStubDtor::SetCallback(StubCallbackSimple::IStubDtor* value) {
    callback = value;
}

unsigned StubStubDtor::GetCallCounter() const {
    return call_counter;
}

void StubStubDtor::ResetCallCounter() {
    call_counter = 0;
}

void StubInit(StubStubDtor* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(StubStubDtor);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubStubData::StubStubData() {
    StubInit(&stub_func1);
    StubInit(&stub_func2_int);
    StubInit(&stub_func2_double);
    StubInit(&stub_func2_doublePtr);
    StubInit(&stub_func3_long_long);
    StubInit(&stub_func3_longlong);
    StubInit(&stub_opAssign_constSimpleRef);
    StubInit(&stub_func3);
    StubInit(&stub_StubDtor);
}

StubStubData::~StubStubData() {
}

StubInternalSimple::Stubfunc1& StubStubData::func1() {
    return stub_func1;
}

StubInternalSimple::Stubfunc2_int& StubStubData::func2_int() {
    return stub_func2_int;
}

StubInternalSimple::Stubfunc2_double& StubStubData::func2_double() {
    return stub_func2_double;
}

StubInternalSimple::Stubfunc2_doublePtr& StubStubData::func2_doublePtr() {
    return stub_func2_doublePtr;
}

StubInternalSimple::Stubfunc3_long_long& StubStubData::func3_long_long() {
    return stub_func3_long_long;
}

StubInternalSimple::Stubfunc3_longlong& StubStubData::func3_longlong() {
    return stub_func3_longlong;
}

StubInternalSimple::StubopAssign_constSimpleRef& StubStubData::opAssign_constSimpleRef() {
    return stub_opAssign_constSimpleRef;
}

StubInternalSimple::Stubfunc3& StubStubData::func3() {
    return stub_func3;
}

StubInternalSimple::StubStubDtor& StubStubData::StubDtor() {
    return stub_StubDtor;
}

::StubSimple** stubstubsimplemanager_pool = 0;
unsigned stubstubsimplemanager_size = 0;
unsigned stubstubsimplemanager_next = 0;

void StubStubManagerGrowPool() {
    if (stubstubsimplemanager_pool == 0) {
        stubstubsimplemanager_pool = new ::StubSimple*[2];
        stubstubsimplemanager_size = 2;
        stubstubsimplemanager_next = 0;
    }
    else {
        ::StubSimple** old = stubstubsimplemanager_pool;
        unsigned old_size = stubstubsimplemanager_size;
        stubstubsimplemanager_size = stubstubsimplemanager_size * 2;
        stubstubsimplemanager_pool = new ::StubSimple*[stubstubsimplemanager_size];
        for (unsigned i = 0; i < old_size; ++i) {
            stubstubsimplemanager_pool[i] = old[i];
        }
        delete [] old;
    }
}

void StubStubManagerRegister(::StubSimple* instance) {
    if (stubstubsimplemanager_pool == 0 || stubstubsimplemanager_next == stubstubsimplemanager_size) {
        StubStubManagerGrowPool();
    }
    stubstubsimplemanager_pool[stubstubsimplemanager_next] = instance;
    stubstubsimplemanager_next += 1;
}

void StubStubManagerUnRegister(::StubSimple* instance) {
    for (unsigned i = 0; i < stubstubsimplemanager_size; ++i) {
        if (stubstubsimplemanager_pool[i] == instance) {
            stubstubsimplemanager_pool[i] = 0;
            break;
        }
    }
}

} //NS:StubInternalSimple

StubStubSimpleManager::StubStubSimpleManager() {
}

StubStubSimpleManager::~StubStubSimpleManager() {
    for (unsigned i = 0; i < ::StubInternalSimple::stubstubsimplemanager_size; ++i) {
        if (::StubInternalSimple::stubstubsimplemanager_pool[i] != 0) {
            delete ::StubInternalSimple::stubstubsimplemanager_pool[i];
        }
    }
    delete [] ::StubInternalSimple::stubstubsimplemanager_pool;
    ::StubInternalSimple::stubstubsimplemanager_pool = 0;
    ::StubInternalSimple::stubstubsimplemanager_size = 0;
    ::StubInternalSimple::stubstubsimplemanager_next = 0;
}

::StubSimple* StubStubSimpleManager::GetInstance() {
    if (::StubInternalSimple::stubstubsimplemanager_size > 0) {
        return ::StubInternalSimple::stubstubsimplemanager_pool[0];
    }
    return reinterpret_cast< ::StubSimple*>(0);
}

::StubSimple* StubStubSimpleManager::GetInstance(unsigned nth) {
    if (::StubInternalSimple::stubstubsimplemanager_size > nth) {
        return ::StubInternalSimple::stubstubsimplemanager_pool[nth];
    }
    return reinterpret_cast< ::StubSimple*>(0);
}

int StubSimple::func1() {
    Stub_data.func1().call_counter++;

    if (Stub_data.func1().callback != 0) {
        return Stub_data.func1().callback->func1();
    }
    else {
        return Stub_data.func1().stub_return;
    }
}

void StubSimple::func2(int x) {
    Stub_data.func2_int().call_counter++;
    Stub_data.func2_int().Param_x = x;

    if (Stub_data.func2_int().callback != 0) {
        Stub_data.func2_int().callback->func2_int(x);
    }
}

void StubSimple::func2(double x) {
    Stub_data.func2_double().call_counter++;
    Stub_data.func2_double().Param_x = x;

    if (Stub_data.func2_double().callback != 0) {
        Stub_data.func2_double().callback->func2_double(x);
    }
}

void StubSimple::func2(double * x) {
    Stub_data.func2_doublePtr().call_counter++;
    Stub_data.func2_doublePtr().Param_x = x;

    if (Stub_data.func2_doublePtr().callback != 0) {
        Stub_data.func2_doublePtr().callback->func2_doublePtr(x);
    }
}

void StubSimple::func3(long x, long y) {
    Stub_data.func3_long_long().call_counter++;
    Stub_data.func3_long_long().Param_x = x;
    Stub_data.func3_long_long().Param_y = y;

    if (Stub_data.func3_long_long().callback != 0) {
        Stub_data.func3_long_long().callback->func3_long_long(x, y);
    }
}

void StubSimple::func3(long long x) {
    Stub_data.func3_longlong().call_counter++;
    Stub_data.func3_longlong().Param_x = x;

    if (Stub_data.func3_longlong().callback != 0) {
        Stub_data.func3_longlong().callback->func3_longlong(x);
    }
}

void StubSimple::operator=(const Simple & other) {
    Stub_data.opAssign_constSimpleRef().call_counter++;
    Stub_data.opAssign_constSimpleRef().Param_other = const_cast<Simple*>(&other);

    if (Stub_data.opAssign_constSimpleRef().callback != 0) {
        Stub_data.opAssign_constSimpleRef().callback->opAssign_constSimpleRef(other);
    }
}

void StubSimple::func3() {
    Stub_data.func3().call_counter++;

    if (Stub_data.func3().callback != 0) {
        Stub_data.func3().callback->func3();
    }
}

StubSimple::StubSimple() {
    ::StubInternalSimple::StubStubManagerRegister(this);
}

StubSimple::~StubSimple() {
    ::StubInternalSimple::StubStubManagerUnRegister(this);
    Stub_data.StubDtor().call_counter++;

    if (Stub_data.StubDtor().callback != 0) {
        Stub_data.StubDtor().callback->StubDtor();
    }
}

StubInternalSimple::StubStubData& StubSimple::GetStub() {
    return Stub_data;
}

