#ifndef stub_class_ns_ref_hpp
#define stub_class_ns_ref_hpp
#include "class_ns_ref.hpp"

namespace Foo {
class StubBar;

namespace StubInternalBar {
void StubStubManagerRegister(Foo::StubBar* instance);
void StubStubManagerUnRegister(Foo::StubBar* instance);
} //NS:StubInternalBar

class StubStubBarManager {
public:
    StubStubBarManager();
    ~StubStubBarManager();

    /// Get the first instance created.
    /// @return Pointer to instance or null if none is created.
    Foo::StubBar* GetInstance();

    /// Get the Nth instance created.
    /// @return Pointer to instance or null if none was found.
    Foo::StubBar* GetInstance(unsigned nth);
};

class StubBar : public Foo::Bar {
public:
    StubBar();
};

} //NS:Foo

class StubGlass;

namespace StubCallbackGlass {
struct Ifunc1 { virtual Foo::Bar func1() = 0; };
struct Ifunc2 { virtual Foo::Bar & func2() = 0; };
struct Ifunc3 { virtual Foo::Bar * func3() = 0; };
struct Ifunc4 { virtual ::Foo::Bar func4() = 0; };
struct Ifunc5 { virtual ::Foo::Bar & func5() = 0; };
struct IStubDtor { virtual void StubDtor() = 0; };
} //NS:StubCallbackGlass

namespace StubInternalGlass {
class Stubfunc1 {
public:
    StubCallbackGlass::Ifunc1* GetCallback();
    void SetCallback(StubCallbackGlass::Ifunc1* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
    Foo::Bar& SetReturn();
private:
    friend class ::StubGlass;

    StubCallbackGlass::Ifunc1* callback;
    unsigned call_counter;
    Foo::Bar stub_return;
};
void StubInit(Stubfunc1* value);

class Stubfunc2 {
public:
    StubCallbackGlass::Ifunc2* GetCallback();
    void SetCallback(StubCallbackGlass::Ifunc2* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
    Foo::Bar *& SetReturn();
private:
    friend class ::StubGlass;

    StubCallbackGlass::Ifunc2* callback;
    unsigned call_counter;
    Foo::Bar * stub_return;
};
void StubInit(Stubfunc2* value);

class Stubfunc3 {
public:
    StubCallbackGlass::Ifunc3* GetCallback();
    void SetCallback(StubCallbackGlass::Ifunc3* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
    Foo::Bar *& SetReturn();
private:
    friend class ::StubGlass;

    StubCallbackGlass::Ifunc3* callback;
    unsigned call_counter;
    Foo::Bar * stub_return;
};
void StubInit(Stubfunc3* value);

class Stubfunc4 {
public:
    StubCallbackGlass::Ifunc4* GetCallback();
    void SetCallback(StubCallbackGlass::Ifunc4* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
    ::Foo::Bar& SetReturn();
private:
    friend class ::StubGlass;

    StubCallbackGlass::Ifunc4* callback;
    unsigned call_counter;
    ::Foo::Bar stub_return;
};
void StubInit(Stubfunc4* value);

class Stubfunc5 {
public:
    StubCallbackGlass::Ifunc5* GetCallback();
    void SetCallback(StubCallbackGlass::Ifunc5* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
    ::Foo::Bar *& SetReturn();
private:
    friend class ::StubGlass;

    StubCallbackGlass::Ifunc5* callback;
    unsigned call_counter;
    ::Foo::Bar * stub_return;
};
void StubInit(Stubfunc5* value);

class StubStubDtor {
public:
    StubCallbackGlass::IStubDtor* GetCallback();
    void SetCallback(StubCallbackGlass::IStubDtor* value);
    unsigned GetCallCounter() const;
    void ResetCallCounter();
private:
    friend class ::StubGlass;

    StubCallbackGlass::IStubDtor* callback;
    unsigned call_counter;
};
void StubInit(StubStubDtor* value);

class StubStubData {
public:
    StubStubData();
    ~StubStubData();

    StubInternalGlass::Stubfunc1& func1();
    StubInternalGlass::Stubfunc2& func2();
    StubInternalGlass::Stubfunc3& func3();
    StubInternalGlass::Stubfunc4& func4();
    StubInternalGlass::Stubfunc5& func5();
    StubInternalGlass::StubStubDtor& StubDtor();

private:
    StubInternalGlass::Stubfunc1 stub_func1;
    StubInternalGlass::Stubfunc2 stub_func2;
    StubInternalGlass::Stubfunc3 stub_func3;
    StubInternalGlass::Stubfunc4 stub_func4;
    StubInternalGlass::Stubfunc5 stub_func5;
    StubInternalGlass::StubStubDtor stub_StubDtor;
};

void StubStubManagerRegister(::StubGlass* instance);
void StubStubManagerUnRegister(::StubGlass* instance);
} //NS:StubInternalGlass

class StubStubGlassManager {
public:
    StubStubGlassManager();
    ~StubStubGlassManager();

    /// Get the first instance created.
    /// @return Pointer to instance or null if none is created.
    ::StubGlass* GetInstance();

    /// Get the Nth instance created.
    /// @return Pointer to instance or null if none was found.
    ::StubGlass* GetInstance(unsigned nth);
};

class StubGlass : public Glass {
public:
    virtual Foo::Bar func1();
    virtual Foo::Bar & func2();
    virtual Foo::Bar * func3();
    virtual ::Foo::Bar func4();
    virtual ::Foo::Bar & func5();
public:
    StubGlass();
    virtual ~StubGlass();

public:
    StubInternalGlass::StubStubData& GetStub();

private:
    mutable StubInternalGlass::StubStubData Stub_data;
};

#endif // stub_class_ns_ref_hpp
