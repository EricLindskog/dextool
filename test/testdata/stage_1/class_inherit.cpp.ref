#include "stub_class_inherit.hpp"

namespace StubInternalFoo {
StubCallbackFoo::Ifunc2* Stubfunc2::GetCallback() {
    return callback;
}

void Stubfunc2::SetCallback(StubCallbackFoo::Ifunc2* value) {
    callback = value;
}

unsigned Stubfunc2::GetCallCounter() const {
    return call_counter;
}

void Stubfunc2::ResetCallCounter() {
    call_counter = 0;
}

void StubInit(Stubfunc2* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc2);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackFoo::Ifunc3* Stubfunc3::GetCallback() {
    return callback;
}

void Stubfunc3::SetCallback(StubCallbackFoo::Ifunc3* value) {
    callback = value;
}

unsigned Stubfunc3::GetCallCounter() const {
    return call_counter;
}

void Stubfunc3::ResetCallCounter() {
    call_counter = 0;
}

void StubInit(Stubfunc3* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc3);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubStubData::StubStubData() {
    StubInit(&stub_func2);
    StubInit(&stub_func3);
}

StubStubData::~StubStubData() {
}

StubInternalFoo::Stubfunc2& StubStubData::func2() {
    return stub_func2;
}

StubInternalFoo::Stubfunc3& StubStubData::func3() {
    return stub_func3;
}

} //NS:StubInternalFoo

void StubFoo::func2() {
    Stub_data.func2().call_counter++;

    if (Stub_data.func2().callback != 0) {
        Stub_data.func2().callback->func2();
    }
}

void StubFoo::func3() {
    Stub_data.func3().call_counter++;

    if (Stub_data.func3().callback != 0) {
        Stub_data.func3().callback->func3();
    }
}

StubInternalFoo::StubStubData& StubFoo::GetStub() {
    return Stub_data;
}

namespace BarSpace {
namespace StubInternalBar {
StubCallbackBar::Ifunc5* Stubfunc5::GetCallback() {
    return callback;
}

void Stubfunc5::SetCallback(StubCallbackBar::Ifunc5* value) {
    callback = value;
}

unsigned Stubfunc5::GetCallCounter() const {
    return call_counter;
}

void Stubfunc5::ResetCallCounter() {
    call_counter = 0;
}

void StubInit(Stubfunc5* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc5);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubStubData::StubStubData() {
    StubInit(&stub_func5);
}

StubStubData::~StubStubData() {
}

StubInternalBar::Stubfunc5& StubStubData::func5() {
    return stub_func5;
}

} //NS:StubInternalBar

void StubBar::func5() {
    Stub_data.func5().call_counter++;

    if (Stub_data.func5().callback != 0) {
        Stub_data.func5().callback->func5();
    }
}

StubInternalBar::StubStubData& StubBar::GetStub() {
    return Stub_data;
}

} //NS:BarSpace

namespace StubInternalWarp {
StubCallbackWarp::Ifunc2* Stubfunc2::GetCallback() {
    return callback;
}

void Stubfunc2::SetCallback(StubCallbackWarp::Ifunc2* value) {
    callback = value;
}

unsigned Stubfunc2::GetCallCounter() const {
    return call_counter;
}

void Stubfunc2::ResetCallCounter() {
    call_counter = 0;
}

void StubInit(Stubfunc2* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc2);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackWarp::Ifunc3* Stubfunc3::GetCallback() {
    return callback;
}

void Stubfunc3::SetCallback(StubCallbackWarp::Ifunc3* value) {
    callback = value;
}

unsigned Stubfunc3::GetCallCounter() const {
    return call_counter;
}

void Stubfunc3::ResetCallCounter() {
    call_counter = 0;
}

void StubInit(Stubfunc3* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc3);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackWarp::Ifunc4* Stubfunc4::GetCallback() {
    return callback;
}

void Stubfunc4::SetCallback(StubCallbackWarp::Ifunc4* value) {
    callback = value;
}

unsigned Stubfunc4::GetCallCounter() const {
    return call_counter;
}

void Stubfunc4::ResetCallCounter() {
    call_counter = 0;
}

void StubInit(Stubfunc4* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc4);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubStubData::StubStubData() {
    StubInit(&stub_func2);
    StubInit(&stub_func3);
    StubInit(&stub_func4);
}

StubStubData::~StubStubData() {
}

StubInternalWarp::Stubfunc2& StubStubData::func2() {
    return stub_func2;
}

StubInternalWarp::Stubfunc3& StubStubData::func3() {
    return stub_func3;
}

StubInternalWarp::Stubfunc4& StubStubData::func4() {
    return stub_func4;
}

} //NS:StubInternalWarp

void StubWarp::func2() {
    Stub_data.func2().call_counter++;

    if (Stub_data.func2().callback != 0) {
        Stub_data.func2().callback->func2();
    }
}

void StubWarp::func3() {
    Stub_data.func3().call_counter++;

    if (Stub_data.func3().callback != 0) {
        Stub_data.func3().callback->func3();
    }
}

void StubWarp::func4() {
    Stub_data.func4().call_counter++;

    if (Stub_data.func4().callback != 0) {
        Stub_data.func4().callback->func4();
    }
}

StubInternalWarp::StubStubData& StubWarp::GetStub() {
    return Stub_data;
}

namespace StubInternalSmurf {
StubCallbackSmurf::Ifunc2* Stubfunc2::GetCallback() {
    return callback;
}

void Stubfunc2::SetCallback(StubCallbackSmurf::Ifunc2* value) {
    callback = value;
}

unsigned Stubfunc2::GetCallCounter() const {
    return call_counter;
}

void Stubfunc2::ResetCallCounter() {
    call_counter = 0;
}

void StubInit(Stubfunc2* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc2);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSmurf::Ifunc3* Stubfunc3::GetCallback() {
    return callback;
}

void Stubfunc3::SetCallback(StubCallbackSmurf::Ifunc3* value) {
    callback = value;
}

unsigned Stubfunc3::GetCallCounter() const {
    return call_counter;
}

void Stubfunc3::ResetCallCounter() {
    call_counter = 0;
}

void StubInit(Stubfunc3* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc3);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSmurf::Ifunc5* Stubfunc5::GetCallback() {
    return callback;
}

void Stubfunc5::SetCallback(StubCallbackSmurf::Ifunc5* value) {
    callback = value;
}

unsigned Stubfunc5::GetCallCounter() const {
    return call_counter;
}

void Stubfunc5::ResetCallCounter() {
    call_counter = 0;
}

void StubInit(Stubfunc5* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc5);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSmurf::Ifunc4* Stubfunc4::GetCallback() {
    return callback;
}

void Stubfunc4::SetCallback(StubCallbackSmurf::Ifunc4* value) {
    callback = value;
}

unsigned Stubfunc4::GetCallCounter() const {
    return call_counter;
}

void Stubfunc4::ResetCallCounter() {
    call_counter = 0;
}

void StubInit(Stubfunc4* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc4);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSmurf::IStubDtor* StubStubDtor::GetCallback() {
    return callback;
}

void StubStubDtor::SetCallback(StubCallbackSmurf::IStubDtor* value) {
    callback = value;
}

unsigned StubStubDtor::GetCallCounter() const {
    return call_counter;
}

void StubStubDtor::ResetCallCounter() {
    call_counter = 0;
}

void StubInit(StubStubDtor* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(StubStubDtor);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubStubData::StubStubData() {
    StubInit(&stub_func2);
    StubInit(&stub_func3);
    StubInit(&stub_func5);
    StubInit(&stub_func4);
    StubInit(&stub_StubDtor);
}

StubStubData::~StubStubData() {
}

StubInternalSmurf::Stubfunc2& StubStubData::func2() {
    return stub_func2;
}

StubInternalSmurf::Stubfunc3& StubStubData::func3() {
    return stub_func3;
}

StubInternalSmurf::Stubfunc5& StubStubData::func5() {
    return stub_func5;
}

StubInternalSmurf::Stubfunc4& StubStubData::func4() {
    return stub_func4;
}

StubInternalSmurf::StubStubDtor& StubStubData::StubDtor() {
    return stub_StubDtor;
}

} //NS:StubInternalSmurf

void StubSmurf::func2() {
    Stub_data.func2().call_counter++;

    if (Stub_data.func2().callback != 0) {
        Stub_data.func2().callback->func2();
    }
}

void StubSmurf::func3() {
    Stub_data.func3().call_counter++;

    if (Stub_data.func3().callback != 0) {
        Stub_data.func3().callback->func3();
    }
}

void StubSmurf::func5() {
    Stub_data.func5().call_counter++;

    if (Stub_data.func5().callback != 0) {
        Stub_data.func5().callback->func5();
    }
}

void StubSmurf::func4() {
    Stub_data.func4().call_counter++;

    if (Stub_data.func4().callback != 0) {
        Stub_data.func4().callback->func4();
    }
}

StubSmurf::StubSmurf() {
}

StubSmurf::~StubSmurf() {
    Stub_data.StubDtor().call_counter++;

    if (Stub_data.StubDtor().callback != 0) {
        Stub_data.StubDtor().callback->StubDtor();
    }
}

StubInternalSmurf::StubStubData& StubSmurf::GetStub() {
    return Stub_data;
}

namespace StubInternalDaddySmurf {
StubCallbackDaddySmurf::Ifunc2* Stubfunc2::GetCallback() {
    return callback;
}

void Stubfunc2::SetCallback(StubCallbackDaddySmurf::Ifunc2* value) {
    callback = value;
}

unsigned Stubfunc2::GetCallCounter() const {
    return call_counter;
}

void Stubfunc2::ResetCallCounter() {
    call_counter = 0;
}

void StubInit(Stubfunc2* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc2);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackDaddySmurf::Ifunc3* Stubfunc3::GetCallback() {
    return callback;
}

void Stubfunc3::SetCallback(StubCallbackDaddySmurf::Ifunc3* value) {
    callback = value;
}

unsigned Stubfunc3::GetCallCounter() const {
    return call_counter;
}

void Stubfunc3::ResetCallCounter() {
    call_counter = 0;
}

void StubInit(Stubfunc3* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc3);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackDaddySmurf::Ifunc4* Stubfunc4::GetCallback() {
    return callback;
}

void Stubfunc4::SetCallback(StubCallbackDaddySmurf::Ifunc4* value) {
    callback = value;
}

unsigned Stubfunc4::GetCallCounter() const {
    return call_counter;
}

void Stubfunc4::ResetCallCounter() {
    call_counter = 0;
}

void StubInit(Stubfunc4* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(Stubfunc4);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackDaddySmurf::IStubDtor* StubStubDtor::GetCallback() {
    return callback;
}

void StubStubDtor::SetCallback(StubCallbackDaddySmurf::IStubDtor* value) {
    callback = value;
}

unsigned StubStubDtor::GetCallCounter() const {
    return call_counter;
}

void StubStubDtor::ResetCallCounter() {
    call_counter = 0;
}

void StubInit(StubStubDtor* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(StubStubDtor);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubStubData::StubStubData() {
    StubInit(&stub_func2);
    StubInit(&stub_func3);
    StubInit(&stub_func4);
    StubInit(&stub_StubDtor);
}

StubStubData::~StubStubData() {
}

StubInternalDaddySmurf::Stubfunc2& StubStubData::func2() {
    return stub_func2;
}

StubInternalDaddySmurf::Stubfunc3& StubStubData::func3() {
    return stub_func3;
}

StubInternalDaddySmurf::Stubfunc4& StubStubData::func4() {
    return stub_func4;
}

StubInternalDaddySmurf::StubStubDtor& StubStubData::StubDtor() {
    return stub_StubDtor;
}

} //NS:StubInternalDaddySmurf

void StubDaddySmurf::func2() {
    Stub_data.func2().call_counter++;

    if (Stub_data.func2().callback != 0) {
        Stub_data.func2().callback->func2();
    }
}

void StubDaddySmurf::func3() {
    Stub_data.func3().call_counter++;

    if (Stub_data.func3().callback != 0) {
        Stub_data.func3().callback->func3();
    }
}

void StubDaddySmurf::func4() {
    Stub_data.func4().call_counter++;

    if (Stub_data.func4().callback != 0) {
        Stub_data.func4().callback->func4();
    }
}

StubDaddySmurf::StubDaddySmurf() {
}

StubDaddySmurf::~StubDaddySmurf() {
    Stub_data.StubDtor().call_counter++;

    if (Stub_data.StubDtor().callback != 0) {
        Stub_data.StubDtor().callback->StubDtor();
    }
}

StubInternalDaddySmurf::StubStubData& StubDaddySmurf::GetStub() {
    return Stub_data;
}

