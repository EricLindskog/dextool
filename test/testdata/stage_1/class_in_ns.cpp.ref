#include "stub_class_in_ns.hpp"

namespace foo {
namespace bar {
namespace StubInternalSmurf {
void StubInit(StubCallback* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(StubCallback);
    for (; d != end; ++d) {
        *d = 0;
    }
}

void StubInit(StubCounter* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(StubCounter);
    for (; d != end; ++d) {
        *d = 0;
    }
}

void StubInit(StubStatic* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(StubStatic);
    for (; d != end; ++d) {
        *d = 0;
    }
}

} //NS:StubInternalSmurf

foo::bar::Smurf& StubSmurf::operator=(const foo::bar::Smurf& other) {
    StubSmurf_cnt.opAssign++;
    StubSmurf_static.opAssign_param_other = const_cast<foo::bar::Smurf*>(&other);

    if (StubSmurf_callback.opAssign == 0) {
        return *StubSmurf_static.opAssign_return;
    }
    else {
        return StubSmurf_callback.opAssign->opAssign(other);
    }
}

StubSmurf::StubSmurf() {
    StubInternalSmurf::StubInit(&StubSmurf_callback);
    StubInternalSmurf::StubInit(&StubSmurf_cnt);
    StubInternalSmurf::StubInit(&StubSmurf_static);
}

StubSmurf::StubSmurf(const foo::bar::Smurf& other) {
    StubInternalSmurf::StubInit(&StubSmurf_callback);
    StubInternalSmurf::StubInit(&StubSmurf_cnt);
    StubInternalSmurf::StubInit(&StubSmurf_static);
}

StubSmurf::~StubSmurf() {
    StubSmurf_cnt.dtorSmurf++;

    if (StubSmurf_callback.dtorSmurf != 0) {
        StubSmurf_callback.dtorSmurf->dtorSmurf();
    }
}

StubInternalSmurf::StubCallback& StubSmurf::StubGetCallback() {
    return this->StubSmurf_callback;
}

StubInternalSmurf::StubCounter& StubSmurf::StubGetCounter() {
    return this->StubSmurf_cnt;
}

StubInternalSmurf::StubStatic& StubSmurf::StubGetStatic() {
    return this->StubSmurf_static;
}

} //NS:bar

} //NS:foo

