#include "stub_class_in_ns.hpp"

namespace foo {
namespace bar {
namespace StubInternalSmurf {
StubCallbackSmurf::IopAssign_constSmurfRef* StubopAssign_constSmurfRef::GetCallback() {
    return callback;
}

void StubopAssign_constSmurfRef::SetCallback(StubCallbackSmurf::IopAssign_constSmurfRef* value) {
    callback = value;
}

unsigned StubopAssign_constSmurfRef::GetCallCounter() const {
    return call_counter;
}

void StubopAssign_constSmurfRef::ResetCallCounter() {
    call_counter = 0;
}

Smurf* StubopAssign_constSmurfRef::GetParam_other() {
    return Param_other;
}

foo::bar::Smurf *& StubopAssign_constSmurfRef::SetReturn() {
    return stub_return;
}

void StubInit(StubopAssign_constSmurfRef* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(StubopAssign_constSmurfRef);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubCallbackSmurf::IStubDtor* StubStubDtor::GetCallback() {
    return callback;
}

void StubStubDtor::SetCallback(StubCallbackSmurf::IStubDtor* value) {
    callback = value;
}

unsigned StubStubDtor::GetCallCounter() const {
    return call_counter;
}

void StubStubDtor::ResetCallCounter() {
    call_counter = 0;
}

void StubInit(StubStubDtor* value) {
    char* d = reinterpret_cast<char*>(value);
    char* end = d + sizeof(StubStubDtor);
    for (; d != end; ++d) {
        *d = 0;
    }
}

StubStubData::StubStubData() {
    StubInit(&stub_opAssign_constSmurfRef);
    StubInit(&stub_StubDtor);
}

StubStubData::~StubStubData() {
}

StubInternalSmurf::StubopAssign_constSmurfRef& StubStubData::opAssign_constSmurfRef() {
    return stub_opAssign_constSmurfRef;
}

StubInternalSmurf::StubStubDtor& StubStubData::StubDtor() {
    return stub_StubDtor;
}

} //NS:StubInternalSmurf

foo::bar::Smurf & StubSmurf::operator=(const foo::bar::Smurf & other) {
    Stub_data.opAssign_constSmurfRef().call_counter++;
    Stub_data.opAssign_constSmurfRef().Param_other = const_cast<Smurf*>(&other);

    if (Stub_data.opAssign_constSmurfRef().callback != 0) {
        return Stub_data.opAssign_constSmurfRef().callback->opAssign_constSmurfRef(other);
    }
    else {
        return *Stub_data.opAssign_constSmurfRef().stub_return;
    }
}

StubSmurf::StubSmurf() {
}

StubSmurf::StubSmurf(const foo::bar::Smurf & other) {
}

StubSmurf::~StubSmurf() {
    Stub_data.StubDtor().call_counter++;

    if (Stub_data.StubDtor().callback != 0) {
        Stub_data.StubDtor().callback->StubDtor();
    }
}

StubInternalSmurf::StubStubData& StubSmurf::GetStub() {
    return Stub_data;
}

} //NS:bar

} //NS:foo

