#ifndef stub_class_in_ns_hpp
#define stub_class_in_ns_hpp
#include "class_in_ns.hpp"

namespace foo {
namespace bar {
namespace StubCallbackSmurf {
struct IopAssign_Smurf { virtual foo::bar::Smurf & opAssign_Smurf(const foo::bar::Smurf & other) = 0; };
struct IStubDtor { virtual void StubDtor() = 0; };
} //NS:StubCallbackSmurf

namespace StubInternalSmurf {
struct StubopAssign_Smurf {
    StubCallbackSmurf::IopAssign_Smurf* callback;
    unsigned call_counter;
    Smurf* param_other;
    foo::bar::Smurf * stub_return;
};
void StubInit(StubopAssign_Smurf* value);

struct StubStubDtor {
    StubCallbackSmurf::IStubDtor* callback;
    unsigned call_counter;
};
void StubInit(StubStubDtor* value);

class StubStubData {
public:
    StubStubData();
    ~StubStubData();

    StubInternalSmurf::StubopAssign_Smurf& opAssign_Smurf();
    StubInternalSmurf::StubStubDtor& StubDtor();

private:
    StubInternalSmurf::StubopAssign_Smurf stub_opAssign_Smurf;
    StubInternalSmurf::StubStubDtor stub_StubDtor;
};
} //NS:StubInternalSmurf

class StubSmurf : public foo::bar::Smurf {
public:
    virtual foo::bar::Smurf & operator=(const foo::bar::Smurf & other);
public:
    StubSmurf();
    StubSmurf(const foo::bar::Smurf & other);
    virtual ~StubSmurf();

public:
    StubInternalSmurf::StubStubData& StubGet();

private:
    StubInternalSmurf::StubStubData Stub_data;
};

} //NS:bar

} //NS:foo

#endif // stub_class_in_ns_hpp
