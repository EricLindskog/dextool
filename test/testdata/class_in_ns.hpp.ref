#ifndef class_in_ns_hpp
#define class_in_ns_hpp
namespace foo {
namespace bar {
class StubSmurf : public foo::bar::Smurf {
public:
    virtual Smurf& operator=(const Smurf& other);
public:
    StubSmurf();
    StubSmurf(const Smurf& other);
    virtual ~StubSmurf();

public:
    StubInternalSmurf::StubCallback& StubGetCallback();
    StubInternalSmurf::StubCounter& StubGetCounter();
    StubInternalSmurf::StubStatic& StubGetStatic();

private:
    StubInternalSmurf::StubCallback StubSmurf_callback;
    StubInternalSmurf::StubCounter StubSmurf_cnt;
    StubInternalSmurf::StubStatic StubSmurf_static;
};

namespace StubCallbackSmurf {
struct IopAssign { virtual Smurf& opAssign(const Smurf& other) = 0; };
struct IdtorSmurf { virtual void dtorSmurf() = 0; };
} //NS:StubCallbackSmurf

namespace StubInternalSmurf {
struct StubCallback {
    StubCallbackSmurf::IopAssign* opAssign;
    StubCallbackSmurf::IdtorSmurf* dtorSmurf;
};
void StubInit(StubCallback* value);

struct StubCounter {
    unsigned opAssign;
    unsigned dtorSmurf;
};
void StubInit(StubCounter* value);

struct StubStatic {
    Smurf* opAssign_param_other;
    Smurf* opAssign_return;
};
void StubInit(StubStatic* value);

} //NS:StubInternalSmurf

} //NS:bar

} //NS:foo

#endif // class_in_ns_hpp
