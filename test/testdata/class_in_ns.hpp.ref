#ifndef class_in_ns.hpp.out
#define class_in_ns.hpp.out
namespace foo {
namespace bar {
class StubSmurf : public foo::bar::Smurf {
public:
    virtual Smurf& operator=(const Smurf& other);
public:
    StubSmurf();
    StubSmurf(const Smurf& other);
    virtual ~StubSmurf();

};

namespace StubCallbackSmurf {
struct IopAssign { virtual Smurf& opAssign(const Smurf& other) = 0; };
struct IdtorSmurf { virtual void dtorSmurf() = 0; };
} //NS:StubCallbackSmurf

namespace StubInternalSmurf {
struct StubData {
    StubCallbackSmurf::IopAssign* opAssign_callback;
    unsigned opAssign_cnt;
    Smurf* opAssign_param_other;
    Smurf* opAssign_return;
    StubCallbackSmurf::IdtorSmurf* dtorSmurf_callback;
    unsigned dtorSmurf_cnt;
};
} //NS:StubInternalSmurf

} //NS:bar

} //NS:foo

#endif // class_in_ns.hpp.out
